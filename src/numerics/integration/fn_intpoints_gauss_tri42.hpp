// auto generated with Python using the quadpy library

#ifndef BELFEM_FN_INTPOINTS_GAUSS_TRI42_HPP
#define BELFEM_FN_INTPOINTS_GAUSS_TRI42_HPP

#include "typedefs.hpp"
#include "cl_Vector.hpp"
#include "cl_Matrix.hpp"

namespace belfem
{
    namespace integration
    {
// ----------------------------------------------------------------------------

        /**
         * 14th order interpolation
         *
         * Hong Xiao, Zydrunas Gimbutas :
         * A numerical algorithm for the construction of efficient quadrature rules in two and higher dimensions
         * Computers & Mathematics with Applications, vol. 59, no. 2, pp. 663â€“676, 2010
         * https://doi.org/10.1016/j.camwa.2009.10.027
         */
        inline void
        gauss_tri42(
                Vector< real > & aWeights,
                Matrix< real > & aPoints )
        {
            aPoints.set_size( 3, 42 );

            aPoints( 0, 0 ) = 0.41764471934045394;
            aPoints( 1, 0 ) = 0.41764471934045394;

            aPoints( 0, 1 ) = 0.0617998830908727;
            aPoints( 1, 1 ) = 0.0617998830908727;

            aPoints( 0, 2 ) = 0.2734775283088387;
            aPoints( 1, 2 ) = 0.2734775283088387;

            aPoints( 0, 3 ) = 0.1772055324125435;
            aPoints( 1, 3 ) = 0.1772055324125435;

            aPoints( 0, 4 ) = 0.0193909612487011;
            aPoints( 1, 4 ) = 0.0193909612487011;

            aPoints( 0, 5 ) = 0.4889639103621786;
            aPoints( 1, 5 ) = 0.4889639103621786;

            aPoints( 0, 6 ) = 0.41764471934045394;
            aPoints( 1, 6 ) = 0.16471056131909212;

            aPoints( 0, 7 ) = 0.0617998830908727;
            aPoints( 1, 7 ) = 0.8764002338182546;

            aPoints( 0, 8 ) = 0.2734775283088387;
            aPoints( 1, 8 ) = 0.4530449433823226;

            aPoints( 0, 9 ) = 0.1772055324125435;
            aPoints( 1, 9 ) = 0.645588935174913;

            aPoints( 0, 10 ) = 0.0193909612487011;
            aPoints( 1, 10 ) = 0.9612180775025978;

            aPoints( 0, 11 ) = 0.4889639103621786;
            aPoints( 1, 11 ) = 0.022072179275642756;

            aPoints( 0, 12 ) = 0.16471056131909212;
            aPoints( 1, 12 ) = 0.41764471934045394;

            aPoints( 0, 13 ) = 0.8764002338182546;
            aPoints( 1, 13 ) = 0.0617998830908727;

            aPoints( 0, 14 ) = 0.4530449433823226;
            aPoints( 1, 14 ) = 0.2734775283088387;

            aPoints( 0, 15 ) = 0.645588935174913;
            aPoints( 1, 15 ) = 0.1772055324125435;

            aPoints( 0, 16 ) = 0.9612180775025978;
            aPoints( 1, 16 ) = 0.0193909612487011;

            aPoints( 0, 17 ) = 0.022072179275642756;
            aPoints( 1, 17 ) = 0.4889639103621786;

            aPoints( 0, 18 ) = 0.014646950055654471;
            aPoints( 1, 18 ) = 0.29837288213625773;

            aPoints( 0, 19 ) = 0.09291624935697185;
            aPoints( 1, 19 ) = 0.336861459796345;

            aPoints( 0, 20 ) = 0.05712475740364799;
            aPoints( 1, 20 ) = 0.17226668782135557;

            aPoints( 0, 21 ) = 0.001268330932872076;
            aPoints( 1, 21 ) = 0.11897449769695682;

            aPoints( 0, 22 ) = 0.6869801678080878;
            aPoints( 1, 22 ) = 0.014646950055654471;

            aPoints( 0, 23 ) = 0.5702222908466832;
            aPoints( 1, 23 ) = 0.09291624935697185;

            aPoints( 0, 24 ) = 0.7706085547749965;
            aPoints( 1, 24 ) = 0.05712475740364799;

            aPoints( 0, 25 ) = 0.8797571713701712;
            aPoints( 1, 25 ) = 0.001268330932872076;

            aPoints( 0, 26 ) = 0.29837288213625773;
            aPoints( 1, 26 ) = 0.6869801678080878;

            aPoints( 0, 27 ) = 0.336861459796345;
            aPoints( 1, 27 ) = 0.5702222908466832;

            aPoints( 0, 28 ) = 0.17226668782135557;
            aPoints( 1, 28 ) = 0.7706085547749965;

            aPoints( 0, 29 ) = 0.11897449769695682;
            aPoints( 1, 29 ) = 0.8797571713701712;

            aPoints( 0, 30 ) = 0.29837288213625773;
            aPoints( 1, 30 ) = 0.014646950055654471;

            aPoints( 0, 31 ) = 0.336861459796345;
            aPoints( 1, 31 ) = 0.09291624935697185;

            aPoints( 0, 32 ) = 0.17226668782135557;
            aPoints( 1, 32 ) = 0.05712475740364799;

            aPoints( 0, 33 ) = 0.11897449769695682;
            aPoints( 1, 33 ) = 0.001268330932872076;

            aPoints( 0, 34 ) = 0.6869801678080878;
            aPoints( 1, 34 ) = 0.29837288213625773;

            aPoints( 0, 35 ) = 0.5702222908466832;
            aPoints( 1, 35 ) = 0.336861459796345;

            aPoints( 0, 36 ) = 0.7706085547749965;
            aPoints( 1, 36 ) = 0.17226668782135557;

            aPoints( 0, 37 ) = 0.8797571713701712;
            aPoints( 1, 37 ) = 0.11897449769695682;

            aPoints( 0, 38 ) = 0.014646950055654471;
            aPoints( 1, 38 ) = 0.6869801678080878;

            aPoints( 0, 39 ) = 0.09291624935697185;
            aPoints( 1, 39 ) = 0.5702222908466832;

            aPoints( 0, 40 ) = 0.05712475740364799;
            aPoints( 1, 40 ) = 0.7706085547749965;

            aPoints( 0, 41 ) = 0.001268330932872076;
            aPoints( 1, 41 ) = 0.8797571713701712;

            for( uint k=0; k<42; ++k )
            {
                aPoints( 2, k ) =  1.0
                                   - aPoints( 0, k )
                                   - aPoints( 1, k );
            }

            aWeights.set_size( 42 );

            aWeights( 0 ) = 0.016394176772062678;
            aWeights( 1 ) = 0.007216849834888334;
            aWeights( 2 ) = 0.025887052253645793;
            aWeights( 3 ) = 0.02108129436849651;
            aWeights( 4 ) = 0.002461701801200041;
            aWeights( 5 ) = 0.010941790684714446;
            aWeights( 6 ) = 0.016394176772062678;
            aWeights( 7 ) = 0.007216849834888334;
            aWeights( 8 ) = 0.025887052253645793;
            aWeights( 9 ) = 0.02108129436849651;
            aWeights( 10 ) = 0.002461701801200041;
            aWeights( 11 ) = 0.010941790684714446;
            aWeights( 12 ) = 0.016394176772062678;
            aWeights( 13 ) = 0.007216849834888334;
            aWeights( 14 ) = 0.025887052253645793;
            aWeights( 15 ) = 0.02108129436849651;
            aWeights( 16 ) = 0.002461701801200041;
            aWeights( 17 ) = 0.010941790684714446;
            aWeights( 18 ) = 0.007218154056766921;
            aWeights( 19 ) = 0.019285755393530342;
            aWeights( 20 ) = 0.012332876606281839;
            aWeights( 21 ) = 0.002505114419250336;
            aWeights( 22 ) = 0.007218154056766921;
            aWeights( 23 ) = 0.019285755393530342;
            aWeights( 24 ) = 0.012332876606281839;
            aWeights( 25 ) = 0.002505114419250336;
            aWeights( 26 ) = 0.007218154056766921;
            aWeights( 27 ) = 0.019285755393530342;
            aWeights( 28 ) = 0.012332876606281839;
            aWeights( 29 ) = 0.002505114419250336;
            aWeights( 30 ) = 0.007218154056766921;
            aWeights( 31 ) = 0.019285755393530342;
            aWeights( 32 ) = 0.012332876606281839;
            aWeights( 33 ) = 0.002505114419250336;
            aWeights( 34 ) = 0.007218154056766921;
            aWeights( 35 ) = 0.019285755393530342;
            aWeights( 36 ) = 0.012332876606281839;
            aWeights( 37 ) = 0.002505114419250336;
            aWeights( 38 ) = 0.007218154056766921;
            aWeights( 39 ) = 0.019285755393530342;
            aWeights( 40 ) = 0.012332876606281839;
            aWeights( 41 ) = 0.002505114419250336;
        }

// ----------------------------------------------------------------------------
    } /* namespace integration */
} /* end namespace belfem */

#endif  // BELFEM_FN_INTPOINTS_GAUSS_TRI42_HPP
