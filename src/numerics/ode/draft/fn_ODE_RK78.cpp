
#include "fn_ODE_RK45.hpp"
#include "assert.hpp"

namespace belfem
{
    namespace ode
    {
//------------------------------------------------------------------------------

        int
        RK78(    ODE                    & aODE,
                 real                   & aT,
                 Vector< real >         & aY,
                 real                   & aStep,
                 Cell< Vector< real > > & aWork,
                 const real              aEpsilon,
                 const uint              aMaxIterations,
                 const real              aXmax )
        {
            // test length of work array
            BELFEM_ASSERT( aWork.size() >= 12, "Size of working cell does not match" );

            // - - - - - - - - - - - - - - - - - - - - - - - - - -
            // link parameters
            // - - - - - - - - - - - - - - - - - - - - - - - - - -

            Vector< real > & k0  = aWork(  0 );
            Vector< real > & k1  = aWork(  1 );
            Vector< real > & k2  = aWork(  2 );
            Vector< real > & k3  = aWork(  3 );
            Vector< real > & k4  = aWork(  4 );
            Vector< real > & k5  = aWork(  5 );
            Vector< real > & k6  = aWork(  6 );
            Vector< real > & k7  = aWork(  7 );
            Vector< real > & k8  = aWork(  8 );
            Vector< real > & k9  = aWork(  9 );

            Vector< real > & y0  = aY;
            Vector< real > & y1  = aWork(  10 );
            Vector< real > & y2  = aWork(  10 );
            Vector< real > & y3  = aWork(  10 );
            Vector< real > & y4  = aWork(  10 );
            Vector< real > & y5  = aWork(  10 );
            Vector< real > & y6  = aWork(  10 );
            Vector< real > & y7  = aWork(  10 );
            Vector< real > & y8  = aWork(  10 );
            Vector< real > & y9  = aWork(  10 );
            Vector< real > & y10 = aWork(  10 );
            Vector< real > & y11 = aWork(  10 );
            Vector< real > & y12 = aWork(  10 );

            Vector< real > & ya = aWork( 10 );
            Vector< real > & yb = aWork( 11 );

            // populate constants


            // - - - - - - - - - - - - - - - - - - - - - - - - - -
            // populate constants
            // - - - - - - - - - - - - - - - - - - - - - - - - - -

            // for timesteps
            Vector< real > c( 16 );
            c(  0 ) = 0.0;
            c(  1 ) = 0.526001519587677318785587544488e-1;
            c(  2 ) = 0.789002279381515978178381316732e-1;
            c(  3 ) = 0.118350341907227396726757197510e00;
            c(  4 ) = 0.281649658092772603273242802490e00;
            c(  5 ) = 0.333333333333333333333333333333e00;
            c(  6 ) = 0.25;
            c(  7 ) = 0.307692307692307692307692307692e00;
            c(  8 ) = 0.651282051282051282051282051282e00;
            c(  9 ) = 0.6;
            c( 10 ) = 0.857142857142857142857142857142e+00;

            Vecotr< real > b( 9, 0.0 );
            b(  0 ) =  5.42937341165687622380535766363e-2;
            b(  1 ) =  2.01365400804030348374776537501e-1;
            b(  2 ) =  4.47106157277725905176885569043e-2;
            b(  5 ) =  4.45031289275240888144113950566e0;
            b(  6 ) =  1.89151789931450038304281599044e0;
            b(  7 ) = -5.8012039600105847814672114227e0;
            b(  8 ) =  3.1116436695781989440891606237e-1;
            b(  9 ) = -1.52160949662516078556178806805e-1;


            Matrix< real > a( 16, 16, 0.0 );

            a(  0,  1 ) =  5.26001519587677318785587544488e-2;

            a(  0,  2 ) =  1.97250569845378994544595329183e-2;
            a(  1,  2 ) =  5.91751709536136983633785987549e-2;

            a(  0,  3 ) =  2.95875854768068491816892993775e-2;
            a(  2,  3 ) =  8.87627564304205475450678981324e-2;

            a(  0,  4 ) =  2.41365134159266685502369798665e-1;
            a(  2,  4 ) = -8.84549479328286085344864962717e-1;
            a(  3,  4 ) =  9.24834003261792003115737966543e-1;

            a(  0,  5 ) =  3.70370370370370370370370370370e-2;
            a(  3,  5 ) =  1.70828608729473871279604482173e-1;
            a(  4,  5 ) =  1.25467687566822425016691814123e-1;

            a(  0,  6 ) =  3.7109375e-2;
            a(  3,  6 ) =  1.70252211019544039314978060272e-1;
            a(  4,  6 ) =  6.02165389804559606850219397283e-2;
            a(  5,  6 ) = -1.7578125e-2;

            a(  0,  7 ) =  3.70920001185047927108779319836e-2;
            a(  3,  7 ) =  1.70383925712239993810214054705e-1;
            a(  4,  7 ) =  1.07262030446373284651809199168e-1;
            a(  5,  7 ) = -1.53194377486244017527936158236e-2;
            a(  6,  7 ) =  8.27378916381402288758473766002e-3;

            a(  0,  8 ) =  6.24110958716075717114429577812e-1;
            a(  3,  8 ) = -3.36089262944694129406857109825e00;
            a(  4,  8 ) = -8.68219346841726006818189891453e-1;
            a(  5,  8 ) =  2.75920996994467083049415600797e01;
            a(  6,  8 ) =  2.01540675504778934086186788979e01;
            a(  7,  8 ) = -4.34898841810699588477366255144e01;

            a(  0,  9 ) =  4.77662536438264365890433908527e-1;
            a(  3,  9 ) = -2.48811461997166764192642586468e0;
            a(  4,  9 ) = -5.90290826836842996371446475743e-1;
            a(  5,  9 ) =  2.12300514481811942347288949897e1;
            a(  6,  9 ) =  1.52792336328824235832596922938e1;
            a(  7,  9 ) = -3.32882109689848629194453265587e1;
            a(  8,  9 ) = -2.03312017085086261358222928593e-2;

            a(  0, 10 ) = -9.3714243008598732571704021658e-1;
            a(  3, 10 ) =  5.18637242884406370830023853209e0;
            a(  4, 10 ) =  1.09143734899672957818500254654e0;
            a(  5, 10 ) = -8.14978701074692612513997267357e0;
            a(  6, 10 ) = -1.85200656599969598641566180701e1;
            a(  7, 10 ) =  2.27394870993505042818970056734e1;
            a(  8, 10 ) =  2.49360555267965238987089396762e0;
            a(  9, 10 ) = -3.0467644718982195003823669022e0;

            a(  0, 11 ) =  2.27331014751653820792359768449e0;
            a(  3, 11 ) = -1.05344954667372501984066689879e1;
            a(  4, 11 ) = -2.00087205822486249909675718444e0;
            a(  5, 11 ) = -1.79589318631187989172765950534e1;
            a(  6, 11 ) =  2.79488845294199600508499808837e1;
            a(  7, 11 ) = -2.85899827713502369474065508674e0;
            a(  8, 11 ) = -8.87285693353062954433549289258e0;
            a(  9, 11 ) =  1.23605671757943030647266201528e1;
            a( 10, 11 ) =  6.43392746015763530355970484046e-1;

            // - - - - - - - - - - - - - - - - - - - - - - - - - -
            // initialization
            // - - - - - - - - - - - - - - - - - - - - - - - - - -

            int tInterrupt = 2 ;

            real h = aStep;

            const real t0 = aT;

            real t1;
            real t2;
            real t3;
            real t4;
            real t5;
            real t6;
            real t7;
            real t8;
            real t9;
            real t10;
            real t11;

            // copy y into
            y0 = aY;
            aODE.eval_ode( t0, y0, k1 );

            real tolb;
            int aStatus = 0;

            for( uint i=0; i<aMaxIterations; ++i )
            {
                // trap h
                if( t0 + h >= aXmax )
                {
                    h = aXmax - t0;
                    aStatus = -1;
                }

                // step 0
                aODE.eval_ode( t0, y0, k0 );

                // step 1
                t1 = t0 + c( 1 ) * h ;
                y1 = y0 + h * a( 0, 1 ) * k0 ;
                aODE.eval_ode( t1, y1, k1 );

                // step 2
                t2 = t0 + c( 2 ) * h ;
                y2 = y0 + h * ( a( 0, 2 ) * k0 + a( 1, 2 ) * k1 );
                aODE.eval_ode( t2, y2, k2 );

                // step 3
                t3 = t0 + c( 3 ) * h;
                y3 = y0 + h * ( a( 0, 3 ) * k0 + a( 2, 3 ) * k2 );
                aODE.eval_ode( t3, y2, k3 );

                // step 4
                t4 = t0 + c( 4 ) * h;
                y4 = y0 + h * ( a( 0, 4 ) * k0 + a( 2, 4 ) * k2 + a( 3, 4 ) * k3 );
                aODE.eval_ode( t4, y4, k4 );

                // step 5
                t5 = t0 + c( 5 ) * h;
                y5 = y0 + h * ( a( 0, 5 ) * k0 + a( 3, 5 ) * k3 + a( 4, 5 ) * k4 );
                aODE.eval_ode( t5, y5, k5 );


                // step 6
                t6 = t0 + c( 6 ) * h ;
                y6 = y0 + h * (
                          a( 0, 6 ) * k0 + a( 3, 6 ) * k3
                        + a( 4, 6 ) * k4 + a( 5, 6 ) * k5 );
                aODE.eval_ode( t6, y6, k6 );

                // step 7
                t7 = t0 + c( 7 ) * h;
                y7 = y0 + h * ( a( 0, 7 ) * k0 + a( 3, 7 ) * k3
                             +  a( 4, 7 ) * k4 + a( 5, 7 ) * k5
                             +  a( 6, 7 ) * k6 );
                aODE.eval_ode( t7, y7, k7 );

                // step 8
                t8 = t0 + c( 8 ) * h;
                y8 = y0 + h * ( a( 0, 8 ) * k0 + a( 3, 8 ) * k3
                            +   a( 4, 8 ) * k4 + a( 5, 8 ) * k5
                            +   a( 6, 8 ) * k6 + a( 7, 8 ) * k7 );
                aODE.eval_ode( t8, y8, k8 );

                // step 9
                t9 = t0 + c( 9 ) * h;
                y9 = y0 + h * ( a( 0, 9 ) * k0 + a( 3, 9 ) * k3
                             +  a( 4, 9 ) * k4 + a( 5, 9 ) * k5
                             +  a( 6, 9 ) * k6 + a( 7, 9 ) * k7
                             +  a( 8, 9 ) * k8 );
                aODE.eval_ode( t9, y9, k9 );

                // step 10
                t10 = t0 + c( 10 ) * h ;
                y10 = y0 + h * ( a( 0, 10 ) * k0 + a( 3, 10 ) * k3
                               + a( 4, 10 ) * k4 + a( 5, 10 ) * k5
                               + a( 6, 10 ) * k6 + a( 7, 10 ) * k7
                               + a( 8, 10 ) * k8 + a( 9, 10 ) * k9 );
                aODE.eval_ode( t10, y10, k1 );

                // step 11
                t11 = t0 + h;
                y11 = y0 + h * ( a( 0, 11 ) * k0 + a( 3, 11 ) * k3
                               + a( 4, 11 ) * k4 + a( 5, 11 ) * k5
                               + a( 6, 11 ) * k6 + a( 7, 11 ) * k7
                               + a( 8, 11 ) * k8 + a( 9, 11 ) * k9
                               + a( 10, 11 ) * k1 );
                aODE.eval_ode( t11, y11, k2 );


                k3 =    b( 0 ) * k0 + b( 1 ) * k1 + b( 2 ) * k2
                      + b( 5 ) * k5 + b( 6 ) * k6 + b( 7 ) * k7
                      + b( 8 ) * k8 + b( 9 ) * k9;

                k4 = y0 + h * k3;

                // Error estimation


            }


            return 1 ; // too many iterations
        }

//------------------------------------------------------------------------------
    }
}