//
// Created by Christian Messe on 27.07.20.
//

#include "cl_Material_Inconel718.hpp"
#include "fn_polyfit.hpp"
#include "fn_polyval.hpp"
#include "fn_dpolyval.hpp"
#include "fn_create_beam_poly.hpp"
#include "fn_linspace.hpp"

namespace belfem
{
    namespace material
    {
//----------------------------------------------------------------------------

        Inconel718::Inconel718() :
                IsotropicMaterial( MaterialType::Inconel718 )
        {
            // set maximum temperature
            mTmax = 1530.0;
            mNumber = "2.4668";

            this->create_conductivity_polys();
            this->create_specific_heat_polys();
            this->create_mech_polys();

            // cryogenic data from 10.1016/S0011-2275(68)80003-7
            // high temperature data from 10.1016/S0011-2275(68)80003-7
            mThermalExpansionPoly = { 5.15032437E-15, -1.59237484E-11,
                                      2.06191841E-08, 3.95094352E-06,
                                      0.00000000E+00 };

            this->create_density_poly( 8192.0 );

            mHasThermal = true;
            mHasMechanical = true;
            mHasExpansion = true;
        }

//----------------------------------------------------------------------------

        void
        Inconel718::create_conductivity_polys()
        {
            // crogenic data, taken from NIST
            // https://trc.nist.gov/cryogenics/materials/Iconel%20718/Inconel718_rev.htm

            Vector <real> tC0 = {
                    0.51115,
                    -5.7205,
                    26.7082,
                    -67.2088,
                    98.1690,
                    -83.4353,
                    39.4470,
                    -8.28921 };

            // temperature step
            real tDeltaT = 5.0;

            // number of samples
            uint tN = 20.0;

            Vector <real> tT0( tN, 10.0 );
            Vector <real> tL0( tN );
            tL0( 0 ) = std::pow( 10., polyval( tC0, std::log10( tT0( 0 ))));
            for ( uint k = 1; k < tN; ++k )
            {
                tT0( k ) = tT0( k - 1 ) + tDeltaT;
                tL0( k ) = std::pow( 10, polyval( tC0, std::log10( tT0( k ))));
            }


            // DOI:10.1068/htwu340
            Vector <real> tT2 = {
                    298.48,
                    298.66,
                    370.96,
                    472.16,
                    571.9,
                    673.9,
                    773.04,
                    893.9,
                    895.18,
                    993.73,
                    900.57,
                    1002.35,
                    1103.04,
                    1199.46,
                    1275.47,
                    1375.1,
                    1443.66 };

            Vector <real> tL2 = {
                    10.5598,
                    11.7145,
                    12.7264,
                    14.1179,
                    15.3289,
                    17.1894,
                    19.2303,
                    21.7588,
                    20.6944,
                    23.5833,
                    21.4074,
                    23.0172,
                    24.5053,
                    25.9932,
                    26.6769,
                    28.238,
                    29.2625
            };

            polyfit( tT0, tL0, 3, mThermalConductivityPoly0 );

            polyfit( tT2, tL2, 2, mThermalConductivityPoly2 );

            // connecting polynomial
            create_beam_poly(
                    mSwitchLambdaT0, // T = 70 K
                    polyval( mThermalConductivityPoly0, mSwitchLambdaT0 ), // lambda @T=70K
                    dpolyval( mThermalConductivityPoly0, mSwitchLambdaT0 ), // dlambdadT @T=70 K,
                    mSwitchLambdaT1, // T = 300 K
                    polyval( mThermalConductivityPoly2, mSwitchLambdaT1 ), // lambda @T=300 K
                    dpolyval( mThermalConductivityPoly2, mSwitchLambdaT1 ), // dlambdadT @T=300 K
                    mThermalConductivityPoly1 );

            // also DOI:10.1068/htwu340
            /*Vector< real > T4=[1613.08
            1624.84
            1674.03
            1772.39
            1872.89];

            Vector< real > L4=[23.322
            23.2978
            23.2014
            22.8867
            22.5964]; */
        }

//----------------------------------------------------------------------------

        void
        Inconel718::create_specific_heat_polys()
        {
            // from ORNL/TM-9616
            Vector <real> tT0 = {
                    4.822,
                    10.758,
                    19.671,
                    30.036,
                    50.668 };

            Vector <real> tC0 = {
                    2.99,
                    5.99,
                    8.42,
                    20.34,
                    70.26
            };

            // continuation of ORNL/TM-9616
            Vector <real> tT2 = {
                    50.668,
                    100.491,
                    149.967,
                    199.258,
                    250.114
            };

            Vector <real> tC2 = {
                    70.26,
                    267.99,
                    358.99,
                    399.6,
                    419.47
            };

            // first dataset
            // Brooks, Charlie R. and Cash, Merle and Garcia, Alejo:
            // The heat capacity of inconel 718 from 313 to 1053 K
            // Journal of Nuclear Materials; Vol. 78(2); p. 419-421
            // doi : 10.1016/0022-3115(78)90463-4
            //
            // second dataset
            // Basak, D., Overfelt, R.A. & Wang, D:
            // Measurement of Specific Heat Capacity and Electrical Resistivity of
            // Industrial Alloys Using Pulse Heating Techniques
            // International Journal of Thermophysics 24, 1721â€“1733 (2003).
            // doi : 10.1023/B:IJOT.0000004101.88449.86
            Vector <real> tT4 = {
                    317.008, 317.024, 319.440, 320.566, 321.972, 322.401,
                    323.107, 326.422, 327.550, 328.791, 329.081, 329.559,
                    332.831, 333.141, 333.254, 334.240, 335.509, 336.707,
                    339.266, 342.345, 344.529, 344.540, 344.635, 346.000,
                    348.318, 351.824, 351.860, 352.475, 354.211, 358.932,
                    359.763, 361.647, 363.108, 365.475, 365.985, 366.052,
                    368.248, 369.404, 369.710, 369.815, 371.789, 375.210,
                    375.696, 376.035, 376.450, 377.267, 378.437, 379.237,
                    380.454, 381.231, 382.502, 383.425, 383.980, 385.186,
                    386.466, 387.308, 387.329, 390.424, 390.575, 391.556,
                    392.026, 392.083, 393.420, 394.489, 395.803, 396.154,
                    397.069, 397.687, 399.049, 399.676, 401.836, 401.891,
                    402.060, 402.496, 402.941, 404.548, 405.622, 406.250,
                    408.434, 408.597, 411.630, 412.020, 412.868, 413.115,
                    413.910, 414.735, 414.757, 415.934, 417.495, 418.629,
                    418.636, 418.644, 418.689, 418.790, 418.947, 419.809,
                    420.766, 421.916, 423.414, 423.991, 424.378, 424.906,
                    426.044, 426.735, 427.030, 428.712, 428.821, 429.293,
                    430.391, 431.037, 431.156, 431.288, 434.419, 436.132,
                    436.291, 438.077, 439.464, 440.431, 440.537, 441.268,
                    445.407, 448.367, 450.120, 450.492, 450.701, 450.913,
                    452.313, 452.708, 454.970, 455.842, 459.100, 459.784,
                    460.751, 462.023, 463.854, 467.147, 469.661, 471.252,
                    471.848, 473.582, 473.825, 476.438, 478.747, 478.863,
                    479.887, 480.577, 480.933, 483.840, 484.493, 486.652,
                    487.932, 488.189, 488.956, 489.208, 490.785, 490.806,
                    491.428, 491.774, 495.294, 498.152, 498.450, 499.358,
                    500.088, 500.163, 501.644, 502.191, 502.346, 505.151,
                    506.621, 508.264, 508.433, 511.234, 512.963, 513.081,
                    516.675, 517.453, 520.799, 523.167, 525.676, 526.150,
                    526.470, 526.863, 527.073, 527.515, 529.561, 530.390,
                    530.765, 533.939, 535.216, 536.137, 537.037, 537.121,
                    537.508, 537.765, 538.044, 539.138, 540.093, 540.403,
                    541.400, 543.436, 543.637, 545.167, 547.056, 547.187,
                    547.829, 549.018, 550.164, 552.194, 556.102, 556.890,
                    558.860, 560.140, 560.329, 562.022, 562.987, 563.242,
                    564.365, 566.717, 567.823, 569.348, 569.764, 570.404,
                    570.730, 571.595, 573.794, 573.884, 575.925, 577.225,
                    577.376, 577.753, 578.146, 579.286, 580.291, 582.111,
                    584.061, 586.944, 587.108, 587.704, 591.682, 591.765,
                    594.904, 595.283, 596.366, 598.968, 600.998, 601.598,
                    604.279, 605.943, 606.341, 609.184, 613.185, 613.299,
                    613.523, 615.767, 618.922, 619.434, 623.697, 624.203,
                    624.251, 625.752, 626.439, 629.581, 631.217, 632.747,
                    635.702, 635.948, 636.462, 637.379, 637.764, 639.647,
                    642.625, 645.452, 645.577, 646.382, 647.158, 648.992,
                    649.368, 651.261, 651.408, 655.441, 656.064, 660.054,
                    662.787, 664.737, 665.143, 668.284, 669.161, 672.765,
                    673.463, 673.641, 677.670, 679.075, 682.367, 682.884,
                    683.083, 687.721, 688.198, 691.174, 692.125, 693.675,
                    694.923, 698.987, 699.321, 700.057, 700.848, 703.441,
                    706.818, 707.689, 708.132, 711.366, 711.401, 712.698,
                    713.829, 714.253, 715.286, 717.843, 720.971, 721.662,
                    722.664, 724.868, 724.904, 725.051, 725.160, 725.396,
                    727.929, 728.180, 731.589, 732.839, 733.129, 733.649,
                    736.990, 739.468, 741.666, 741.718, 744.478, 746.739,
                    748.297, 750.936, 750.978, 752.548, 753.118, 755.376,
                    759.417, 759.532, 759.621, 760.265, 763.549, 764.979,
                    766.897, 771.257, 771.322, 774.045, 774.795, 776.658,
                    778.908, 781.645, 782.554, 783.687, 784.512, 787.604,
                    787.652, 787.849, 791.162, 791.353, 795.116, 795.229,
                    796.844, 797.096, 797.831, 799.981, 801.830, 805.440,
                    806.192, 806.355, 806.448, 807.505, 807.694, 810.539,
                    814.383, 814.451, 815.619, 816.737, 817.026, 817.206,
                    818.956, 821.612, 821.627, 821.736, 823.008, 823.390,
                    824.495, 825.094, 827.739, 829.183, 831.567, 833.516,
                    833.546, 833.935, 836.464, 836.608, 839.178, 839.692,
                    841.035, 841.706, 842.397, 842.947, 844.316, 845.486,
                    845.625, 846.686, 847.803, 851.065, 851.955, 853.178,
                    853.456, 855.731, 855.977, 858.542, 858.851, 860.824,
                    861.521, 863.830, 863.915, 864.111, 865.983, 866.009,
                    868.389, 869.320, 873.548, 873.611, 876.733, 876.848,
                    881.416, 881.713, 882.261, 883.892, 885.196, 887.778,
                    888.286, 892.231, 892.354, 892.730, 892.733, 893.658,
                    894.455, 895.151, 895.847, 898.261, 899.875, 900.735,
                    900.947, 901.371, 901.588, 904.263, 907.609, 907.693,
                    908.215, 908.629, 910.548, 910.977, 914.369, 915.343,
                    916.748, 917.676, 918.300, 920.627, 922.287, 922.475,
                    922.631, 923.187, 923.479, 925.787, 927.023, 929.121,
                    930.094, 930.451, 930.630, 930.744, 935.358, 936.513,
                    936.737, 937.425, 938.824, 939.007, 939.130, 940.060,
                    940.207, 942.523, 943.039, 944.158, 944.856, 946.767,
                    947.474, 947.608, 947.722, 948.342, 949.800, 952.217,
                    954.333, 955.251, 957.130, 957.447, 958.052, 958.810,
                    960.425, 961.762, 962.409, 963.047, 964.402, 964.689,
                    965.204, 965.464, 966.084, 968.122, 969.269, 970.589,
                    971.233, 972.436, 973.559, 974.682, 975.589, 977.620,
                    979.539, 980.834, 981.097, 981.532, 982.965, 984.509,
                    985.694, 986.439, 988.721, 988.815, 989.281, 990.725,
                    991.495, 991.810, 994.269, 995.047, 995.215, 996.227,
                    996.525, 997.756, 998.480, 998.813, 998.858, 1001.356,
                    1001.672, 1002.998, 1003.039, 1003.172, 1007.051, 1008.241,
                    1008.503, 1013.245, 1013.831, 1014.148, 1014.391, 1016.601,
                    1017.156, 1019.269, 1020.103, 1023.320, 1023.665, 1024.244,
                    1025.169, 1025.235, 1026.818, 1027.472, 1027.963, 1030.220,
                    1030.726, 1030.954, 1031.244, 1032.367, 1034.046, 1034.745,
                    1034.919, 1034.959, 1040.713, 1041.416, 1041.711, 1045.477,
                    1048.009, 1048.287, 1052.279, 1052.858, 1054.682, 1055.668,
                    1057.094, 1059.818,
                    // Basak et al, 2003
                    376.609, 393.768, 404.067, 418.655, 432.385, 445.255,
                    460.273, 475.288, 488.159, 503.605, 517.336, 531.066,
                    545.226, 560.670, 573.111, 588.984, 603.140, 616.011,
                    631.028, 646.902, 657.198, 672.215, 686.372, 702.246,
                    715.115, 728.415, 742.573, 756.731, 771.747, 783.761,
                    798.349, 811.650, 824.950, 838.250, 852.409, 864.421,
                    878.151, 891.879, 904.751, 917.193, 932.640, 944.227,
                    957.102, 969.121, 982.428, 993.591, 1004.325, 1015.057,
                    1027.505, 1035.231, 1045.959, 1056.255, 1066.122, 1077.704,
                    1088.856, 1098.294, 1107.731, 1116.740, 1127.894, 1137.761,
                    1148.486, 1157.493, 1168.219, 1178.943, 1187.951, 1196.960,
                    1207.254, 1217.977, 1228.272, 1236.847
            };

            Vector <real> tC4 = {
                    444.328, 442.918, 444.065, 440.037, 446.758, 444.676,
                    441.991, 446.969, 442.874, 440.526, 438.847, 444.155,
                    441.207, 437.849, 439.662, 436.104, 443.026, 444.440,
                    444.848, 446.870, 444.793, 443.785, 447.279, 445.871,
                    443.861, 444.003, 440.913, 446.020, 447.636, 447.714,
                    445.902, 446.309, 448.328, 453.572, 456.126, 450.417,
                    447.264, 452.238, 449.148, 451.701, 456.005, 451.915,
                    456.551, 450.573, 449.701, 449.098, 452.863, 453.738,
                    453.472, 456.295, 451.394, 453.277, 452.002, 452.676,
                    458.590, 455.838, 454.024, 454.770, 453.360, 450.272,
                    456.252, 451.348, 452.426, 453.302, 456.327, 460.896,
                    463.451, 456.735, 455.663, 459.762, 459.632, 454.998,
                    452.042, 460.910, 457.485, 458.564, 458.969, 463.001,
                    460.856, 458.438, 464.424, 465.701, 462.478, 464.360,
                    465.638, 464.363, 462.415, 465.642, 470.617, 465.984,
                    465.380, 464.641, 472.366, 463.701, 461.820, 468.876,
                    467.803, 461.827, 460.621, 457.465, 458.944, 459.953,
                    466.471, 465.062, 462.980, 469.097, 471.314, 465.605,
                    463.996, 466.415, 456.272, 468.028, 465.751, 469.248,
                    467.166, 464.483, 472.748, 470.803, 461.801, 468.453,
                    472.224, 472.970, 473.108, 475.863, 469.549, 474.453,
                    470.157, 471.032, 473.724, 468.352, 466.680, 477.429,
                    475.550, 470.582, 475.557, 470.930, 475.167, 477.589,
                    472.754, 474.437, 476.722, 472.563, 471.291, 472.904,
                    477.608, 476.334, 480.432, 474.191, 476.006, 476.078,
                    470.439, 471.514, 475.143, 476.689, 480.320, 478.506,
                    483.008, 476.493, 475.493, 484.971, 482.554, 474.092,
                    480.945, 474.497, 474.836, 485.719, 483.973, 474.911,
                    476.123, 485.598, 482.710, 485.538, 476.137, 477.548,
                    481.788, 484.477, 486.836, 480.459, 485.100, 479.257,
                    486.445, 487.454, 481.073, 477.849, 476.040, 485.850,
                    488.403, 482.364, 488.547, 490.632, 482.842, 475.721,
                    477.200, 478.275, 489.024, 487.817, 486.946, 483.454,
                    490.509, 489.506, 483.864, 491.458, 479.975, 491.866,
                    483.067, 485.219, 491.133, 490.601, 491.012, 481.341,
                    485.980, 491.895, 487.260, 492.436, 490.759, 491.969,
                    488.277, 483.311, 481.030, 489.094, 488.154, 491.112,
                    486.276, 493.129, 489.708, 493.470, 492.064, 484.745,
                    483.402, 485.754, 486.763, 493.079, 487.909, 493.825,
                    488.657, 484.431, 493.433, 488.665, 494.652, 487.532,
                    484.449, 486.667, 497.954, 494.669, 494.136, 489.032,
                    490.516, 498.244, 487.229, 497.983, 490.468, 492.215,
                    496.179, 488.862, 495.990, 498.409, 491.567, 494.456,
                    490.292, 488.884, 499.365, 496.081, 494.606, 490.714,
                    491.862, 493.945, 496.096, 498.449, 500.197, 500.738,
                    499.872, 488.928, 501.289, 490.140, 493.030, 497.736,
                    500.155, 488.337, 487.330, 500.102, 492.983, 497.963,
                    495.013, 501.332, 489.711, 498.048, 492.273, 495.640,
                    505.113, 489.932, 491.553, 498.341, 505.267, 495.663,
                    490.222, 497.420, 491.308, 502.197, 490.041, 495.955,
                    504.624, 503.289, 497.782, 492.544, 505.712, 491.678,
                    502.904, 497.599, 505.930, 494.719, 491.763, 496.200,
                    491.836, 501.711, 505.677, 494.666, 492.591, 491.249,
                    497.834, 505.497, 490.920, 501.400, 503.617, 506.506,
                    497.577, 499.257, 496.175, 493.155, 502.963, 504.643,
                    495.851, 491.624, 499.825, 495.391, 501.712, 492.984,
                    498.227, 491.717, 499.711, 492.393, 489.774, 492.869,
                    493.416, 495.162, 487.505, 490.193, 486.237, 490.875,
                    488.394, 484.777, 490.822, 488.679, 482.232, 484.520,
                    488.287, 485.001, 488.026, 483.461, 482.119, 483.067,
                    490.523, 485.217, 490.397, 497.115, 486.845, 488.726,
                    500.620, 490.679, 485.441, 509.360, 501.168, 515.619,
                    497.416, 494.999, 498.626, 500.509, 530.537, 518.049,
                    535.455, 541.165, 510.537, 518.801, 517.123, 513.294,
                    536.742, 551.862, 550.653, 552.803, 547.902, 526.810,
                    524.596, 531.046, 547.174, 550.670, 554.437, 537.782,
                    535.230, 536.574, 539.535, 550.351, 549.819, 540.483,
                    552.510, 541.294, 539.884, 550.566, 548.890, 541.168,
                    552.319, 553.933, 550.712, 548.704, 541.787, 552.605,
                    540.379, 541.997, 555.566, 543.884, 552.080, 544.964,
                    554.571, 541.746, 557.532, 540.739, 553.775, 551.558,
                    544.175, 545.319, 541.499, 559.166, 546.007, 547.754,
                    560.930, 558.647, 557.909, 545.418, 549.250, 547.711,
                    561.953, 547.721, 548.729, 562.702, 550.879, 552.561,
                    565.191, 563.379, 561.567, 562.849, 551.701, 570.445,
                    563.930, 562.251, 555.198, 557.220, 571.132, 575.499,
                    576.978, 564.686, 562.137, 560.056, 581.492, 579.009,
                    597.283, 598.696, 568.469, 565.586, 585.204, 603.745,
                    567.337, 589.035, 587.155, 574.330, 572.519, 612.358,
                    575.280, 614.040, 598.658, 600.472, 586.712, 626.347,
                    584.162, 583.022, 624.941, 609.290, 587.190, 611.509,
                    610.502, 597.072, 633.751, 595.733, 628.381, 626.437,
                    600.644, 623.819, 602.458, 641.756, 609.382, 610.395,
                    637.202, 639.421, 617.190, 624.714, 653.735, 646.616,
                    623.915, 659.587, 661.940, 653.545, 641.524, 628.492,
                    630.643, 631.450, 659.194, 669.543, 640.728, 666.325,
                    668.946, 646.848, 654.643, 673.992, 654.110, 653.510,
                    674.070, 678.640, 656.205, 665.140, 681.064, 664.408,
                    678.450, 684.027, 673.486, 665.425, 683.294, 686.724,
                    678.530, 674.702, 683.641, 686.397, 556.617, 689.288,
                    675.384, 685.463, 681.300, 687.413, 683.585, 689.166,
                    685.203, 687.221, 683.728, 683.863, 686.760, 688.912,
                    689.585, 687.916, 695.441, 691.478, 693.763, 689.334,
                    688.059, 692.027, 689.879, 691.700, 696.873, 693.516,
                    695.130, 689.488, 692.648, 694.396, 698.562, 701.657,
                    704.614, 696.621, 694.875, 702.737, 697.568, 695.555,
                    703.683, 700.325, 704.435, 701.951, 699.802, 700.886,
                    703.578, 714.394, 707.685, 704.328, 709.907, 706.349,
                    711.324, 709.180,
                    459.860, 458.850, 464.390, 467.410, 471.940, 471.440,
                    476.470, 476.470, 477.990, 482.520, 487.550, 491.570,
                    497.110, 497.610, 497.620, 498.120, 496.120, 497.630,
                    500.150, 503.170, 503.170, 506.190, 506.700, 507.710,
                    507.210, 507.710, 509.230, 512.250, 513.760, 517.780,
                    520.800, 524.330, 526.340, 529.360, 531.380, 532.890,
                    535.410, 535.910, 538.930, 540.950, 547.990, 554.530,
                    564.590, 577.670, 591.750, 608.350, 625.440, 639.020,
                    650.590, 659.640, 664.170, 664.680, 664.180, 663.170,
                    659.150, 658.150, 656.650, 657.150, 656.650, 657.160,
                    656.660, 653.640, 654.150, 652.640, 651.130, 650.130,
                    648.120, 644.100, 641.090, 633.050
            };

            // continuation of dataset from Basak et al:

            Vector <real> tT6 = {
                    1377.221, 1380.624, 1385.302, 1385.728, 1386.153, 1390.832,
                    1392.533, 1398.913, 1401.040, 1409.121, 1411.248, 1411.673,
                    1413.800, 1422.306, 1426.134, 1427.410, 1434.216, 1441.021,
                    1449.102, 1452.930, 1458.885, 1460.586, 1463.563, 1467.817,
                    1470.794, 1476.323, 1478.025, 1484.405, 1489.083, 1492.060,
                    1495.888, 1498.866
            };

            Vector <real> tC6 = {
                    634.231, 646.463, 667.548, 655.752, 673.450, 660.406,
                    686.536, 701.728, 692.466, 706.823, 721.156, 713.995,
                    726.643, 740.580, 754.499, 746.076, 761.692, 766.773,
                    776.495, 790.835, 797.599, 805.611, 814.049, 822.492,
                    831.351, 839.378, 850.339, 855.419, 863.442, 875.251,
                    884.535, 895.080
            };

            // create cryogenic polys
            polyfit( tT0, tC0, 3, mSpecificHeatPoly0 );
            polyfit( tT2, tC2, 4, mSpecificHeatPoly2 );

            // normal temperature poly
            polyfit( tT4, tC4, 5, mSpecificHeatPoly4 );

            // high temperature poly
            polyfit( tT6, tC6, 1, mSpecificHeatPoly6 );

            // first connecting polynomial
            create_beam_poly(
                    mSwitchCT0,
                    polyval( mSpecificHeatPoly0, mSwitchCT0 ),
                    dpolyval( mSpecificHeatPoly0, mSwitchCT0 ),
                    mSwitchCT1,
                    polyval( mSpecificHeatPoly2, mSwitchCT1 ),
                    dpolyval( mSpecificHeatPoly2, mSwitchCT1 ),
                    mSpecificHeatPoly1 );

            // second connecting polynomial
            create_beam_poly(
                    mSwitchCT2,
                    polyval( mSpecificHeatPoly2, mSwitchCT2 ),
                    dpolyval( mSpecificHeatPoly2, mSwitchCT2 ),
                    mSwitchCT3,
                    polyval( mSpecificHeatPoly4, mSwitchCT3 ),
                    dpolyval( mSpecificHeatPoly4, mSwitchCT3 ),
                    mSpecificHeatPoly3 );

            // third connecting polynomial
            create_beam_poly(
                    mSwitchCT4,
                    polyval( mSpecificHeatPoly4, mSwitchCT4 ),
                    dpolyval( mSpecificHeatPoly4, mSwitchCT4 ),
                    mSwitchCT5,
                    polyval( mSpecificHeatPoly6, mSwitchCT5 ),
                    dpolyval( mSpecificHeatPoly6, mSwitchCT5 ),
                    mSpecificHeatPoly5 );

        }

//----------------------------------------------------------------------------

        void
        Inconel718::create_mech_polys()
        {
            // from datasheet
            // ( last value extrapolated to melting temperature )

            // temperature in Â°F
            Vector <real> tT =
                    { 70.,
                      100.,
                      200.,
                      300.,
                      400.,
                      500.,
                      600.,
                      700.,
                      800.,
                      900.,
                      1000.,
                      1100.,
                      1200.,
                      1300.,
                      1400.,
                      1500.,
                      1600.,
                      1700.,
                      1800.,
                      1900.,
                      2000.,
                      2300.
                    };

            // Young's modulus in ksi
            Vector <real> tE =
                    {
                            29.0,
                            28.8,
                            28.4,
                            28.0,
                            27.6,
                            27.1,
                            26.7,
                            26.2,
                            25.8,
                            25.3,
                            24.8,
                            24.2,
                            23.7,
                            23.0,
                            22.3,
                            21.3,
                            20.2,
                            18.8,
                            17.4,
                            15.9,
                            14.3,
                            9.4
                    };

            // shear modulus in ksi
            Vector <real> tG =
                    { 11.2,
                      11.2,
                      11.0,
                      10.9,
                      10.8,
                      10.6,
                      10.5,
                      10.3,
                      10.1,
                      9.9,
                      9.7,
                      9.5,
                      9.2,
                      8.9,
                      8.5,
                      8.1,
                      7.6,
                      7.1,
                      6.5,
                      5.8,
                      5.1,
                      3.2
                    };

            // transform units:

            // T from Â°F to K
            tT -= 32.0;
            tT *= 5. / 9.;
            tT += 273.15;

            // E from ksi to Pa
            tE *= 6894757293.1783;

            // G from ksi to Pa
            tG *= 6894757293.1783;

            // create polynomials
            polyfit( tT, tE, 3, mYoungPoly );
            polyfit( tT, tG, 3, mShearPoly );

        }

//----------------------------------------------------------------------------


        real
        Inconel718::lambda( const real aT ) const
        {
            if ( aT < mSwitchLambdaT0 )
            {
                return polyval( mThermalConductivityPoly0, aT );
            }
            else if ( aT < mSwitchLambdaT1 )
            {
                return polyval( mThermalConductivityPoly1, aT );
            }
            else
            {
                return polyval( mThermalConductivityPoly2, aT );
            }
        }

//----------------------------------------------------------------------------

        real
        Inconel718::c( const real aT ) const
        {
            if ( aT < mSwitchCT0 )
            {
                return polyval( mSpecificHeatPoly0, aT );
            }
            else if ( aT < mSwitchCT1 )
            {
                return polyval( mSpecificHeatPoly1, aT );
            }
            else if ( aT < mSwitchCT2 )
            {
                return polyval( mSpecificHeatPoly2, aT );
            }
            else if ( aT < mSwitchCT3 )
            {
                return polyval( mSpecificHeatPoly3, aT );
            }
            else if ( aT < mSwitchCT4 )
            {
                return polyval( mSpecificHeatPoly4, aT );
            }
            else if ( aT < mSwitchCT5 )
            {
                return polyval( mSpecificHeatPoly5, aT );
            }
            else
            {
                return polyval( mSpecificHeatPoly6, aT );
            }
        }

//----------------------------------------------------------------------------
    } /* end namespace material */
}  /* end namespace belfem */