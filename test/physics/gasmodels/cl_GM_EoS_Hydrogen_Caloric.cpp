//
// Created by Christian Messe on 24.08.20.
//



#include <gtest/gtest.h>

#include "typedefs.hpp"
#include "cl_Communicator.hpp"
#include "cl_Vector.hpp"
#include "fn_r2.hpp"
#include "cl_Gas.hpp"

#include "cl_GM_EoS_Hydrogen.hpp"
#include "fn_GM_Helmholz_DerivTest.hpp"

using namespace belfem;
using namespace belfem::gastables;
using namespace belfem::gasmodels;

TEST( GASMODELS, Hydrogen_Caloric )
{
//----------------------------------------------------------------------------

    // crate reference mixture
    Gas tRef( "H2" );

    // create EoS
    EoS_Hydrogen tGas( tRef, HelmholtzModel::NormalHydrogen );

//----------------------------------------------------------------------------
// check correct implementation of derivatives
//----------------------------------------------------------------------------

    Vector< real > tR2( 7 );

    deriv_test( tGas, tR2 );

    // phi0_t
    EXPECT_NEAR( tR2( 0 ), 1.0, 1e-6 );

    // phi0_tt
    EXPECT_NEAR( tR2( 1 ), 1.0, 1e-6 );

    // phir_t
    EXPECT_NEAR( tR2( 2 ), 1.0, 1e-6 );

    // phir_d
    EXPECT_NEAR( tR2( 3 ), 1.0, 1e-6 );

    // phir_tt
    EXPECT_NEAR( tR2( 4 ), 1.0, 1e-6 );

    // phir_dt
    EXPECT_NEAR( tR2( 5 ), 1.0, 1e-6 );

    // phir_dd
    EXPECT_NEAR( tR2( 6 ), 1.0, 1e-6 );


//----------------------------------------------------------------------------

    // temperature in K
    Vector< real > tT = { 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.,
                          26., 27., 28., 29., 30., 40., 50., 60., 70., 80., 90.,
                          100., 110., 120., 130., 140., 150., 160., 170., 180.,
                          190., 200., 250., 300., 350., 400., 450., 500., 550.,
                          600., 650., 700., 750., 800., 850., 900., 950., 1000 };

//----------------------------------------------------------------------------

    // pressure in Pa
    //real tP = 1.01325e5 ;
    real tP = 1e6 ;

//----------------------------------------------------------------------------

    // Density in kg/m^3
    Vector< real > tRho = { 76.9963, 76.1727, 75.3066, 74.3933, 73.4284, 72.4073,
                            71.3240, 70.1712, 68.9395, 67.6162, 66.1846, 64.6207,
                            62.8894, 60.9358, 58.6644, 55.8826, 7.27599, 5.27646,
                            4.22491, 3.54898, 3.07014, 2.71024, 2.42856, 2.20147,
                            2.01416, 1.85682, 1.72268, 1.60689, 1.50588, 1.41695,
                            1.33804, 1.26753, 1.20414, 0.96365, 0.80350, 0.68911,
                            0.60328, 0.53649, 0.48302, 0.43926, 0.40277, 0.37188,
                            0.34539, 0.32243, 0.30233, 0.28459, 0.26881, 0.25470,
                            0.24199};

//----------------------------------------------------------------------------

    Vector< real > tH = { -35.5910, -28.2297, -20.5036, -12.3873, -3.8578, 5.1132,
                          14.5608, 24.5290, 35.0733, 46.2651, 58.1990, 71.0058,
                          84.8754, 100.104, 117.197, 137.171, 592.001, 721.62,
                          839.186, 952.518, 1064.65, 1177.27, 1291.41, 1407.66,
                          1526.34, 1647.54, 1771.22, 1897.27, 2025.54, 2155.84,
                          2287.99, 2421.80, 2557.10, 3250.64, 3962.09, 4682.08,
                          5405.73, 6130.79, 6856.50, 7582.80, 8309.93, 9038.24,
                          9768.13, 10500.0, 11234.2, 11971.2, 12711.4, 13455.0,
                          14202.6};

    tH *= 1000.0 ;

    // offset correction
    tH += tGas.h( tT( 0 ), tP ) -tH( 0 );

//----------------------------------------------------------------------------

    Vector< real > tS = { -2.69623, -2.22126, -1.75298, -1.28918, -0.828113,
                          -0.368063, 0.0927876, 0.556411, 1.02503, 1.50124,
                          1.98829, 2.49046, 3.01376, 3.56741, 4.16702, 4.8438,
                          18.8188, 21.7196, 23.865, 25.6124, 27.1098, 28.4362,
                          29.6385, 30.7464, 31.7788, 32.7488, 33.6653, 34.5349,
                          35.3626, 36.1525, 36.9078, 37.6312, 38.3252, 41.4183,
                          44.0119, 46.2314, 48.164, 49.8719, 51.4011, 52.7856,
                          54.051, 55.2169, 56.2987, 57.3085, 58.2562, 59.1498,
                          59.9959, 60.8001, 61.5669 };

    tS *= 1000.0 ;
    tS += tGas.s( tT( 0 ), tP ) -tS( 0 );

//---------------------------------------------------------------------------

    Vector< real > tCv = { 5.23827, 5.33005, 5.41976, 5.50076, 5.57474, 5.6443,
                           5.71111, 5.77594, 5.83895, 5.90014, 5.95963, 6.01792,
                           6.07634, 6.13777, 6.20854, 6.30426, 6.4991, 6.36772,
                           6.36435, 6.44943, 6.61342, 6.83945, 7.10622, 7.39333,
                           7.6844, 7.96777, 8.23603, 8.48506, 8.71302, 8.91959,
                           9.10536, 9.27148, 9.4193, 9.93491, 10.1935, 10.3109,
                           10.3593, 10.3795, 10.3923, 10.4072, 10.4281, 10.4563,
                           10.4923, 10.5361, 10.5877, 10.6471, 10.7141, 10.7883,
                           10.8693 };
    tCv *= 1000.0 ;

//---------------------------------------------------------------------------

    Vector< real > tCp = { 7.19133, 7.53868, 7.91749, 8.31872, 8.74505, 9.20274,
                           9.69972, 10.2459, 10.8545, 11.5446, 12.3446, 13.2998,
                           14.4872, 16.0498, 18.2931, 22.0344, 14.2547, 12.1443,
                           11.4759, 11.2376, 11.2161, 11.3249, 11.5125, 11.7434,
                           11.9932, 12.2453, 12.4893, 12.7191, 12.9316, 13.1255,
                           13.3009, 13.4583, 13.5987, 14.0906, 14.3369, 14.4473,
                           14.4914, 14.5087, 14.5196, 14.5332, 14.5532, 14.5807,
                           14.6162, 14.6596, 14.711, 14.7702, 14.837, 14.9111,
                           14.992 };

    tCp *= 1000.0 ;

//---------------------------------------------------------------------------

    Vector< real > tW = { 1280.34, 1261, 1240.99, 1219.92, 1197.43, 1173.25,
                          1147.18, 1119.03, 1088.58, 1055.56, 1019.56, 980.037,
                          936.114, 886.432, 828.631, 758.007, 496.595, 576.092,
                          639.253, 692.615, 738.809, 779.58, 816.324, 850.134,
                          881.812, 911.918, 940.826, 968.786, 995.966, 1022.48,
                          1048.4, 1073.8, 1098.71, 1217.09, 1326.92, 1429.7,
                          1526.38, 1617.65, 1704.09, 1786.23, 1864.53, 1939.39,
                          2011.14, 2080.08, 2146.44, 2210.41, 2272.18, 2331.92,
                          2389.76};

//---------------------------------------------------------------------------

    // allocate data containers
    uint tNumSamples = tT.length() ;
    Vector< real > tY( tNumSamples ) ;
    Vector< real > tY0( tNumSamples );

//----------------------------------------------------------------------------

    // density
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k ) = 1.0 / tGas.v( tT( k ), tP );
    }

    EXPECT_NEAR( r2( tY, tRho ), 1.0, 1e-3 );

//----------------------------------------------------------------------------


    // enthalpy
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k ) = tGas.h( tT( k ), tP );
    }

    EXPECT_NEAR( r2( tY, tH ), 1.0, 1e-3 );

//----------------------------------------------------------------------------

    // entropy
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k ) = tGas.s( tT( k ), tP );
    }

    EXPECT_NEAR( r2( tY, tS ), 1.0, 1e-3 );

//----------------------------------------------------------------------------

    // specific heat capacity at constant volume
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k ) = tGas.cv( tT( k ), tP );
    }

    EXPECT_NEAR( r2( tY, tCv ), 1.0, 1e-2 );

//----------------------------------------------------------------------------

    // specific heat capacity at constant pressure
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k ) = tGas.cp( tT( k ), tP );
    }

    EXPECT_NEAR( r2( tY, tCp ), 1.0, 1e-2 );

//----------------------------------------------------------------------------

    // speed of sound
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k ) = tGas.w( tT( k ), tP );
    }

    EXPECT_NEAR( r2( tY, tW ), 1.0, 1e-3 );
//----------------------------------------------------------------------------


    // entropy derivative against temperature
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k )   = tGas.dsdT( tT( k ), tP ) ;
        real tS1 = tGas.s( tT( k )*1.001, tP ) ;
        real tS0 = tGas.s( tT( k )*0.999, tP ) ;

        tY0( k  ) = ( tS1 - tS0 ) / ( 0.002 * tT( k ) );

    }
    EXPECT_NEAR( r2( tY, tY0 ), 1.0, 1e-3 );

//----------------------------------------------------------------------------

    // entropy derivative against pressure
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k )   = tGas.dsdp( tT( k ), tP ) ;
        real tS1 = tGas.s( tT( k ), tP * 1.0001) ;
        real tS0 = tGas.s( tT( k ), tP * 0.9999 ) ;
        tY0( k  ) = ( tS1 - tS0 ) / ( 0.0002 * tP );

    }
    EXPECT_NEAR( r2( tY, tY0 ), 1.0, 1e-3 );

//----------------------------------------------------------------------------
}