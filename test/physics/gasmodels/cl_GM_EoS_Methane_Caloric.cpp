//
// Created by Christian Messe on 22.08.20.
//

#include <gtest/gtest.h>

#include "typedefs.hpp"
#include "cl_Communicator.hpp"
#include "cl_Vector.hpp"
#include "fn_r2.hpp"
#include "cl_Gas.hpp"

#include "cl_GM_EoS_Methane.hpp"
#include "fn_GM_Helmholz_DerivTest.hpp"

using namespace belfem;
using namespace belfem::gastables;
using namespace belfem::gasmodels;

TEST( GASMODELS, Methane_Caloric )
{
//----------------------------------------------------------------------------

    // crate reference mixture
    Gas tRef( "CH4" );

    // create EoS
    EoS_Methane tGas( tRef );

//----------------------------------------------------------------------------
// check correct impplementation of derivatives
//----------------------------------------------------------------------------
    Vector< real > tR2( 7 );

    deriv_test( tGas, tR2 );

    // phi0_t
    EXPECT_NEAR( tR2( 0 ), 1.0, 1e-6 );

    // phi0_tt
    EXPECT_NEAR( tR2( 1 ), 1.0, 1e-6 );

    // phir_t
    EXPECT_NEAR( tR2( 2 ), 1.0, 1e-6 );

    // phir_d
    EXPECT_NEAR( tR2( 3 ), 1.0, 1e-6 );

    // phir_tt
    EXPECT_NEAR( tR2( 4 ), 1.0, 1e-6 );

    // phir_dt
    EXPECT_NEAR( tR2( 5 ), 1.0, 1e-6 );

    // phir_dd
    EXPECT_NEAR( tR2( 6 ), 1.0, 1e-6 );

//----------------------------------------------------------------------------
// Physical Properties
//----------------------------------------------------------------------------
    // temperature in K
    Vector< real > tT = {95., 100., 105., 110., 115., 120., 125., 130.,
                         135., 140., 145., 150., 155., 160., 165., 170.,
                         175., 180., 185., 190., 195., 200., 205., 210.,
                         215., 220., 225., 230., 235., 240., 245., 250.,
                         255., 260., 265., 270., 275., 280., 285., 290.,
                         295., 300., 305., 310., 315., 320., 325., 330.,
                         335., 340., 345., 350., 355., 360., 365., 370.,
                         375., 380., 385., 390., 395., 400., 405., 410.,
                         415., 420., 425., 430., 435., 440., 445., 450.,
                         455., 460., 465., 470., 475., 480., 485., 490.,
                         495., 500., 505., 510., 515., 520., 525., 530.,
                         535., 540., 545., 550., 555., 560., 565., 570.,
                         575., 580., 585., 590., 595., 600., 605., 610.,
                         615., 620., 625 };

//----------------------------------------------------------------------------

    // pressure in Pa
    real tP = 1e6 ;

//----------------------------------------------------------------------------

    // Density in kg/m^3
    Vector< real > tRho = { 446.39, 439.62, 432.70, 425.61, 418.32, 410.80,
                            403.01, 394.92, 386.44, 377.51, 368.02, 15.5360,
                            14.6900, 13.9650, 13.3320, 12.7690, 12.2650,
                            11.8070, 11.3900, 11.0070, 10.6540, 10.3260,
                            10.0200, 9.7351, 9.4678, 9.2166, 8.9798, 8.7563,
                            8.5447, 8.3440, 8.1534, 7.9721, 7.7993, 7.6344,
                            7.4768, 7.3260, 7.1816, 7.0432, 6.9103, 6.7826,
                            6.6597, 6.5415, 6.4277, 6.3179, 6.2120, 6.1097,
                            6.0109, 5.9153, 5.8229, 5.7334, 5.6468, 5.5628,
                            5.4813, 5.4023, 5.3256, 5.2511, 5.1788, 5.1084,
                            5.0400, 4.9735, 4.9087, 4.8457, 4.7842, 4.7244,
                            4.6661, 4.6092, 4.5537, 4.4996, 4.4468, 4.3952,
                            4.3449, 4.2957, 4.2476, 4.2006, 4.1546, 4.1097,
                            4.0657, 4.0227, 3.9806, 3.9394, 3.8991, 3.8595,
                            3.8208, 3.7829, 3.7457, 3.7092, 3.6735, 3.6385,
                            3.6041, 3.5704, 3.5373, 3.5048, 3.4729, 3.4416,
                            3.4109, 3.3807, 3.3511, 3.3220, 3.2933, 3.2652,
                            3.2376, 3.2104, 3.1837, 3.1574, 3.1316, 3.1062,
                            3.0812};

//----------------------------------------------------------------------------

    Vector< real > tH = { -55.704, -38.758, -21.687, -4.4701, 12.914, 30.489,
                          48.289, 66.352, 84.733, 103.50, 122.75, 557.27,
                          571.06, 584.23, 596.98, 609.42, 621.60, 633.59,
                          645.42, 657.11, 668.69, 680.18, 691.59, 702.94,
                          714.23, 725.49, 736.71, 747.91, 759.10, 770.27,
                          781.43, 792.60, 803.78, 814.96, 826.16, 837.38,
                          848.63, 859.90, 871.21, 882.55, 893.93, 905.35,
                          916.82, 928.34, 939.90, 951.52, 963.20, 974.94,
                          986.73, 998.59, 1010.5, 1022.5, 1034.6, 1046.7,
                          1058.9, 1071.2, 1083.6, 1096.0, 1108.5, 1121.1,
                          1133.8, 1146.5, 1159.4, 1172.3, 1185.3, 1198.4,
                          1211.6, 1224.8, 1238.2, 1251.6, 1265.1, 1278.8,
                          1292.5, 1306.3, 1320.2, 1334.1, 1348.2, 1362.4,
                          1376.6, 1391.0, 1405.4, 1419.9, 1434.6, 1449.3,
                          1464.1, 1479.0, 1494.0, 1509.0, 1524.2, 1539.5,
                          1554.9, 1570.3, 1585.8, 1601.5, 1617.2, 1633.0,
                          1648.9, 1664.9, 1681.0, 1697.2, 1713.5, 1729.9,
                          1746.3, 1762.9, 1779.5, 1796.2, 1813.1};
    tH *= 1000.0 ;

    // offset correction
    tH += tGas.h( tT( 0 ), tP ) -tH( 0 );

//----------------------------------------------------------------------------

    Vector< real > tS = { -0.56005, -0.38621, -0.21964, -0.05946, 0.09509,
                          0.24468, 0.39000, 0.53168, 0.67041, 0.80692,
                          0.94203, 3.8571, 3.9475, 4.0311, 4.1096,4.1838,
                          4.2545, 4.3220, 4.3868, 4.4492, 4.5094, 4.5675,
                          4.6239, 4.6786, 4.7318, 4.7835, 4.8340, 4.8832,
                          4.9313, 4.9783, 5.0244, 5.0695, 5.1138, 5.1572,
                          5.1999, 5.2418, 5.2831, 5.3237, 5.3637, 5.4032,
                          5.4421, 5.4805, 5.5184, 5.5558, 5.5929, 5.6295,
                          5.6657, 5.7015, 5.7370, 5.7721, 5.8070, 5.8415,
                          5.8757, 5.9096, 5.9433, 5.9767, 6.0099, 6.0428,
                          6.0755, 6.1080, 6.1403, 6.1724, 6.2043, 6.2360,
                          6.2675, 6.2989, 6.3301, 6.3611, 6.3920, 6.4227,
                          6.4533, 6.4837, 6.5140, 6.5442, 6.5742, 6.6041,
                          6.6339, 6.6636, 6.6931, 6.7225, 6.7518, 6.7810,
                          6.8101, 6.8391, 6.8680, 6.8968, 6.9255, 6.9541,
                          6.9826, 7.0110, 7.0393, 7.0675, 7.0957, 7.1237,
                          7.1517, 7.1795, 7.2073, 7.2351, 7.2627, 7.2902,
                          7.3177, 7.3451, 7.3724, 7.3996, 7.4268, 7.4539,
                          7.4809};

    tS *= 1000.0 ;
    tS += tGas.s( tT( 0 ), tP ) -tS( 0 );

//---------------------------------------------------------------------------

    Vector< real > tCv = { 2.1437, 2.1162, 2.0908, 2.0667, 2.0438, 2.0219,
                           2.0010, 1.9813, 1.9629, 1.9460, 1.9311, 1.7556,
                           1.7094, 1.6824, 1.6639, 1.6499, 1.6391, 1.6307,
                           1.6241, 1.6191, 1.6155, 1.6131, 1.6117, 1.6113,
                           1.6118, 1.6131, 1.6151, 1.6179, 1.6214, 1.6255,
                           1.6303, 1.6358, 1.6418, 1.6485, 1.6557, 1.6635,
                           1.6719, 1.6809, 1.6903, 1.7003, 1.7108, 1.7217,
                           1.7331, 1.7450, 1.7573, 1.7701, 1.7832, 1.7967,
                           1.8106, 1.8248, 1.8394, 1.8542, 1.8694, 1.8849,
                           1.9006, 1.9166, 1.9328, 1.9493, 1.9660, 1.9828,
                           1.9999, 2.0171, 2.0345, 2.0520, 2.0697, 2.0875,
                           2.1054, 2.1235, 2.1416, 2.1598, 2.1781, 2.1965,
                           2.2149, 2.2334, 2.2520, 2.2706, 2.2892, 2.3079,
                           2.3266, 2.3453, 2.3641, 2.3828, 2.4016, 2.4203,
                           2.4391, 2.4579, 2.4766, 2.4954, 2.5141, 2.5328,
                           2.5515, 2.5701, 2.5888, 2.6074, 2.6260, 2.6445,
                           2.6630, 2.6815, 2.6999, 2.7183, 2.7367, 2.7550,
                           2.7733, 2.7915, 2.8096, 2.8278, 2.8458};
    tCv *= 1000.0 ;

//---------------------------------------------------------------------------

    Vector< real > tCp = {3.3781, 3.4011, 3.4282, 3.4593, 3.4950, 3.5363,
                          3.5848, 3.6424, 3.7122, 3.7984, 3.9075, 2.8402,
                          2.6869, 2.5878, 2.5159, 2.4604, 2.4162, 2.3803,
                          2.3508, 2.3264, 2.3062, 2.2895, 2.2757, 2.2643,
                          2.2551, 2.2477, 2.2421, 2.2379, 2.2352, 2.2336,
                          2.2333, 2.2340, 2.2358, 2.2385, 2.2420, 2.2465,
                          2.2518, 2.2578, 2.2646, 2.2720, 2.2801, 2.2889,
                          2.2983, 2.3082, 2.3187, 2.3298, 2.3413, 2.3533,
                          2.3657, 2.3786, 2.3919, 2.4056, 2.4196, 2.4340,
                          2.4487, 2.4637, 2.4790, 2.4945, 2.5104, 2.5264,
                          2.5427, 2.5592, 2.5759, 2.5927, 2.6098, 2.6269,
                          2.6443, 2.6617, 2.6793, 2.6970, 2.7148, 2.7327,
                          2.7507, 2.7687, 2.7869, 2.8051, 2.8233, 2.8416,
                          2.8599, 2.8783, 2.8967, 2.9151, 2.9335, 2.9520,
                          2.9704, 2.9889, 3.0074, 3.0258, 3.0443, 3.0627,
                          3.0812, 3.0996, 3.1180, 3.1364, 3.1548, 3.1731,
                          3.1914, 3.2097, 3.2279, 3.2461, 3.2643, 3.2824,
                          3.3005, 3.3186, 3.3366, 3.3545, 3.3725};

    tCp *= 1000.0 ;

//---------------------------------------------------------------------------

    Vector< real > tW = { 1506.2, 1459.6, 1411.9, 1363.2, 1313.4, 1262.4,
                          1210.2, 1156.6, 1101.2, 1043.7, 983.57, 287.76,
                          296.87, 305.18, 312.91, 320.20, 327.13, 333.74,
                          340.09, 346.20, 352.10, 357.81, 363.35, 368.73,
                          373.96, 379.06, 384.03, 388.88, 393.61, 398.24,
                          402.77, 407.20, 411.54, 415.79, 419.95, 424.04,
                          428.04, 431.98, 435.84, 439.64, 443.37, 447.04,
                          450.64, 454.19, 457.69, 461.13, 464.52, 467.87,
                          471.16, 474.42, 477.63, 480.80, 483.93, 487.02,
                          490.07, 493.09, 496.08, 499.04, 501.97, 504.86,
                          507.73, 510.57, 513.39, 516.18, 518.95, 521.69,
                          524.41, 527.11, 529.79, 532.44, 535.08, 537.70,
                          540.31, 542.89, 545.46, 548.01, 550.54, 553.06,
                          555.57, 558.05, 560.53, 562.99, 565.44, 567.87,
                          570.29, 572.70, 575.10, 577.48, 579.85, 582.21,
                          584.56, 586.90, 589.23, 591.55, 593.85, 596.15,
                          598.44, 600.71, 602.98, 605.24, 607.49, 609.73,
                          611.96, 614.18, 616.39, 618.59, 620.79};

//---------------------------------------------------------------------------

    // allocate data containers
    uint tNumSamples = tT.length() ;
    Vector< real > tY( tNumSamples ) ;
    Vector< real > tY0( tNumSamples );

//----------------------------------------------------------------------------

    // density
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k ) = 1.0 / tGas.v( tT( k ), tP );
    }

    EXPECT_NEAR( r2( tY, tRho ), 1.0, 1e-3 );

//----------------------------------------------------------------------------


    // enthalpy
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k ) = tGas.h( tT( k ), tP );
    }

    EXPECT_NEAR( r2( tY, tH ), 1.0, 1e-3 );

//----------------------------------------------------------------------------

    // entropy
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k ) = tGas.s( tT( k ), tP );
    }

    EXPECT_NEAR( r2( tY, tS ), 1.0, 1e-3 );

//----------------------------------------------------------------------------

    // specific heat capacity at constant volume
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k ) = tGas.cv( tT( k ), tP );
    }

    EXPECT_NEAR( r2( tY, tCv ), 1.0, 1e-2 );

//----------------------------------------------------------------------------

    // specific heat capacity at constant pressure
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k ) = tGas.cp( tT( k ), tP );
    }

    EXPECT_NEAR( r2( tY, tCp ), 1.0, 1e-2 );

//----------------------------------------------------------------------------

    // speed of sound
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k ) = tGas.w( tT( k ), tP );
    }

    EXPECT_NEAR( r2( tY, tW ), 1.0, 1e-3 );
//----------------------------------------------------------------------------


    // entropy derivative against temperature
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k )   = tGas.dsdT( tT( k ), tP ) ;
        real tS1 = tGas.s( tT( k )*1.001, tP ) ;
        real tS0 = tGas.s( tT( k )*0.999, tP ) ;

        tY0( k  ) = ( tS1 - tS0 ) / ( 0.002 * tT( k ) );

    }
    EXPECT_NEAR( r2( tY, tY0 ), 1.0, 1e-3 );

//----------------------------------------------------------------------------

    // entropy derivative against pressure
    for( uint k=0; k<tNumSamples; ++k )
    {
        tY( k )   = tGas.dsdp( tT( k ), tP ) ;
        real tS1 = tGas.s( tT( k ), tP * 1.0001) ;
        real tS0 = tGas.s( tT( k ), tP * 0.9999 ) ;
        tY0( k  ) = ( tS1 - tS0 ) / ( 0.0002 * tP );

    }
    EXPECT_NEAR( r2( tY, tY0 ), 1.0, 1e-3 );

//----------------------------------------------------------------------------
}