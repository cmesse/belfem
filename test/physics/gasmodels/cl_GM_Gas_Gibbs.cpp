//
// Created by Christian Messe on 13.09.19.
//

#include <gtest/gtest.h>


#include "typedefs.hpp"
#include "cl_Communicator.hpp"
#include "cl_Gas.hpp"
#include "cl_Vector.hpp"
#include "cl_Matrix.hpp"
#include "fn_r2.hpp"
#include "fn_linspace.hpp"
#include "GT_globals.hpp"

using namespace belfem;
using namespace belfem::gastables;

TEST( GASMODELS, Gibbs )
{
//------------------------------------------------------------------------------
/**
 * This test calculates the molar Gibbs potential for some combustion products
 */
//------------------------------------------------------------------------------

    // Create a mixture of combustion products, the molar fractions do not matter
    Cell< string > tSpecies = { "H2O", "CO2", "NO2", "O3", "HNO" };
    Vector< real > tMolarFractions = { 0.2, 0.2, 0.2, 0.2, 0.2 };

    // create the mixture as ideal gas
    Gas tGas( tSpecies, tMolarFractions );

    // maximum temperature of interest
    real tTmax = 6000 ;

//------------------------------------------------------------------------------
// Reference Data from JANAF
//------------------------------------------------------------------------------

    // temperatures that are to be tested
    Vector< real > tT = { 100., 200., 298.15, 300., 400., 500., 600., 700.,
                          800., 900., 1000., 1100., 1200., 1300., 1400., 1500.,
                          1600., 1700., 1800., 1900., 2000., 2100., 2200., 2300.,
                          2400., 2500., 2600., 2700., 2800., 2900., 3000., 3100.,
                          3200., 3300., 3400., 3500., 3600., 3700., 3800., 3900.,
                          4000., 4100., 4200., 4300., 4400., 4500., 4600., 4700.,
                          4800., 4900., 5000., 5100., 5200., 5300., 5400., 5500.,
                          5600., 5700., 5800., 5900., 6000};

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // data for H2O
    Vector< real > tH2O = { -236.584, -232.766, -228.582, -228.5, -223.901, -219.051,
                            -214.007, -208.812, -203.496, -198.083, -192.59, -187.033,
                            -181.425, -175.774, -170.089, -164.376, -158.639, -152.883,
                            -147.111, -141.325, -135.528, -129.721, -123.905, -118.082,
                            -112.252, -106.416, -100.575, -94.729, -88.878, -83.023,
                            -77.163, -71.298, -65.43, -59.558, -53.681, -47.801,
                            -41.916, -36.027, -30.133, -24.236, -18.334, -12.427,
                            -6.516, -0.6, 5.32, 11.245, 17.175, 23.111, 29.052,
                            34.998, 40.949, 46.906, 52.869, 58.838, 64.811,
                            70.791, 76.777, 82.769, 88.767, 94.77, 100.78 };

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // data for CO2
    Vector< real > tCO2 = { -393.683, -394.085, -394.389, -394.394, -394.675, -394.939,
                            -395.182, -395.398, -395.586, -395.748, -395.886, -396.001,
                            -396.098, -396.177, -396.24, -396.288, -396.323, -396.344,
                            -396.353, -396.349, -396.333, -396.304, -396.262, -396.209,
                            -396.142, -396.062, -395.969, -395.862, -395.742, -395.609,
                            -395.461, -395.298, -395.122, -394.932, -394.726, -394.506,
                            -394.271, -394.022, -393.756, -393.477, -393.183, -392.874,
                            -392.55, -392.21, -391.857, -391.488, -391.105, -390.706,
                            -390.292, -389.862, -389.419, -388.959, -388.486, -387.996,
                            -387.493, -386.974, -386.439, -385.89, -385.324, -384.745,
                            -384.148};

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // data for NO2
    Vector< real > tNO2 = { 39.963, 45.422, 51.258, 51.371, 57.56, 63.867, 70.23, 76.616,
                            83.008, 89.397, 95.779, 102.152, 108.514, 114.867, 121.209,
                            127.543, 133.868, 140.186, 146.497, 152.804, 159.106, 165.404,
                            171.7, 177.993, 184.285, 190.577, 196.87, 203.164, 209.46,
                            215.757, 222.058, 228.363, 234.67, 240.981, 247.298, 253.618,
                            259.945, 266.276, 272.613, 278.956, 285.305, 291.659, 298.02,
                            304.388, 310.762, 317.142, 323.53, 329.925, 336.326, 342.736,
                            349.152, 355.576, 362.006, 368.446, 374.892, 381.347, 387.811,
                            394.281, 400.762, 407.249, 413.748 };

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // data for O3
    Vector< real > tO3 = {  150.235, 156.541, 163.184, 163.311, 170.247, 177.224, 184.191,
                            191.13, 198.037, 204.913, 211.759, 218.578, 225.372, 232.144,
                            238.896, 245.629, 252.347, 259.05, 265.74, 272.419, 279.089,
                            285.75, 292.406, 299.054, 305.698, 312.339, 318.978, 325.616,
                            332.253, 338.889, 345.527, 352.167, 358.808, 365.451, 372.1,
                            378.75, 385.405, 392.063, 398.728, 405.396, 412.069, 418.747,
                            425.431, 432.121, 438.815, 445.516, 452.222, 458.935, 465.655,
                            472.381, 479.113, 485.853, 492.597, 499.351, 506.11, 512.876,
                            519.653, 526.434, 533.226, 540.023, 546.832 };

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // data for HNO
    Vector< real > tHNO = { 104.706, 108.348, 112.398, 112.478, 116.912, 121.538, 126.283,
                            131.104, 135.973, 140.872, 145.789, 150.716, 155.647, 160.58,
                            165.511, 170.439, 175.364, 180.286, 185.204, 190.118, 195.029,
                            199.938, 204.844, 209.748, 214.651, 219.553, 224.455, 229.358,
                            234.26, 239.164, 244.069, 248.976, 253.885, 258.797, 263.711,
                            268.629, 273.55, 278.475, 283.404, 288.337, 293.275, 298.217,
                            303.164, 308.116, 313.073, 318.036, 323.004, 327.978, 332.959,
                            337.945, 342.937, 347.936, 352.94, 357.953, 362.971, 367.996,
                            373.028, 378.068, 383.115, 388.168, 393.23};

//------------------------------------------------------------------------------
// Calculate Values
//------------------------------------------------------------------------------

    // Number of steps
    uint tN = tT.length();
    uint tM = tSpecies.size();

    // Allocate Vector with values
    Matrix< real > tValues( tN, tM, 0.0 );
    Vector< real > tRow( tM );

    for( uint k=0; k<tN; ++k )
    {
        tGas.Gibbs( tT( k ), tRow );
        tValues.set_row( k, tRow );
    }

    tValues *= 0.001;

//------------------------------------------------------------------------------
// RUN TESTS
//------------------------------------------------------------------------------

    EXPECT_NEAR( r2( tValues.col( 0 ), tH2O ),  1.0,  5e-3 );
    EXPECT_NEAR( r2( tValues.col( 1 ), tCO2 ) , 1.0,  5e-3 );
    EXPECT_NEAR( r2( tValues.col( 2 ), tNO2 ),  1.0,  5e-3 );
    EXPECT_NEAR( r2( tValues.col( 3 ), tO3 ),   1.0,  5e-3 ); // <-- needed to modify thermo.inp
    EXPECT_NEAR( r2( tValues.col( 4 ), tHNO ),  1.0, 15e-3 ); // <-- be more tolerant here

//------------------------------------------------------------------------------
// Calculate Derivatives
//------------------------------------------------------------------------------

    tN = 501;
    const real tDeltaT = 1.0;
    tT = linspace( 200.0, tTmax-tDeltaT, tN );

    tValues.set_size( tN, tM, 0.0 );
    Matrix< real > tExpect( tN, tM, 0.0 );

    Vector< real > tWork1( tM );
    Vector< real > tWork2( tM );


    for( uint k=0; k<tN; ++k )
    {
        // calculate gibbs derivative
        tGas.dGibbsdT( tT( k ), tRow );
        tValues.set_row( k, tRow );

        // calculate approximation
        tGas.Gibbs( tT( k )-tDeltaT, tWork1 );
        tGas.Gibbs( tT( k )+tDeltaT, tWork2 );

        tRow = tWork2 - tWork1;
        tRow /= 2.0 * tDeltaT;
        tExpect.set_row( k, tRow );
    }

    for( uint j=0; j<tM; ++j )
    {
        EXPECT_NEAR( r2( tValues.col( j ), tExpect.col( j ) ),  1.0,  1e-2 );
    }

//------------------------------------------------------------------------------
}
